---
targetClass:
  fullClassName: "com.emazon.stock.ports.persistence.mysql.adapter.BrandAdapter"
methods:
- method:
    name: "saveBrand"
    sourceCodeSignature: "void saveBrand(Brand brand)"
    returnType: "void"
    parameters:
    - name: "brand"
      type: "com.emazon.stock.domain.model.Brand"
    instructionFingerprint: "95D6F45CDE2684C42DF588B56FA367B1"
  paths:
  - testPathName: "saveBrandTest"
    constructorSignature: "<init>(com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository,com.emazon.stock.ports.persistence.mysql.mapper.IBrandEntityMapper)\
      \ : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "brand"
      valueUuid: "brand"
    - type: "FIELD"
      name: "brandEntityMapper"
      valueUuid: "brandEntityMapper"
      methodExercised:
        expression: "toEntity(brand):brandEntity"
    - type: "FIELD"
      name: "brandRepository"
      valueUuid: "brandRepository"
      methodExercised:
        expression: "save(brandEntity):object"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.emazon.stock.ports.persistence.mysql.adapter.BrandAdapter"
        parameters:
        - name: "brandRepository"
          value:
            sapientType: "MOCK"
            valueType: "com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository"
            uuid: "brandRepository"
        - name: "brandEntityMapper"
          value:
            sapientType: "MOCK"
            valueType: "com.emazon.stock.ports.persistence.mysql.mapper.IBrandEntityMapper"
            uuid: "brandEntityMapper"
      valueType: "com.emazon.stock.ports.persistence.mysql.adapter.BrandAdapter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "com.emazon.stock.domain.model.Brand"
      uuid: "brand"
    - sapientType: "MOCK"
      valueType: "com.emazon.stock.ports.persistence.mysql.mapper.IBrandEntityMapper"
      uuid: "brandEntityMapper"
    - sapientType: "MOCK"
      valueType: "com.emazon.stock.ports.persistence.mysql.entity.BrandEntity"
      uuid: "brandEntity"
    - sapientType: "MOCK"
      valueType: "com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository"
      uuid: "brandRepository"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "VOID"
      uuid: "expectedResult"
- method:
    name: "brandExistsByName"
    sourceCodeSignature: "boolean brandExistsByName(String brandName)"
    returnType: "boolean"
    parameters:
    - name: "brandName"
      type: "java.lang.String"
    instructionFingerprint: "1B9095FF9EF60E28BCAA748502505728"
  paths:
  - testPathName: "brandExistsByNameWhenBrandRepositoryFindByBrandNameBrandNameIsPresent"
    constructorSignature: "<init>(com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository,com.emazon.stock.ports.persistence.mysql.mapper.IBrandEntityMapper)\
      \ : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "brandName"
      valueUuid: "brandName"
    - type: "FIELD"
      name: "brandRepository"
      valueUuid: "brandRepository"
      methodExercised:
        expression: "findByBrandName(brandName):optional"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.emazon.stock.ports.persistence.mysql.adapter.BrandAdapter"
        parameters:
        - name: "brandRepository"
          value:
            sapientType: "MOCK"
            valueType: "com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository"
            uuid: "brandRepository"
        - name: "brandEntityMapper"
          value:
            sapientType: "MOCK"
            valueType: "com.emazon.stock.ports.persistence.mysql.mapper.IBrandEntityMapper"
            uuid: "brandEntityMapper"
      valueType: "com.emazon.stock.ports.persistence.mysql.adapter.BrandAdapter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "brandName1"
      valueType: "java.lang.String"
      uuid: "brandName"
    - sapientType: "MOCK"
      valueType: "com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository"
      uuid: "brandRepository"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "MOCK"
          valueType: "com.emazon.stock.ports.persistence.mysql.entity.BrandEntity"
          uuid: "optional-value"
      valueType: "java.util.Optional"
      genericValueType: "com.emazon.stock.ports.persistence.mysql.entity.BrandEntity"
      uuid: "optional"
    - sapientType: "BASIC"
      content: !<regular>
        value: "true"
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 22
      expression: "brandRepository.findByBrandName(brandName).isPresent()"
      range: "(22,16)-(22,69)"
      evaluatedAs: true
  - testPathName: "brandExistsByNameWhenBrandRepositoryFindByBrandNameBrandNameNotIsPresent"
    constructorSignature: "<init>(com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository,com.emazon.stock.ports.persistence.mysql.mapper.IBrandEntityMapper)\
      \ : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "brandName"
      valueUuid: "brandName"
    - type: "FIELD"
      name: "brandRepository"
      valueUuid: "brandRepository"
      methodExercised:
        expression: "findByBrandName(brandName):optional"
    - type: "RESULT"
      name: "result"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.emazon.stock.ports.persistence.mysql.adapter.BrandAdapter"
        parameters:
        - name: "brandRepository"
          value:
            sapientType: "MOCK"
            valueType: "com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository"
            uuid: "brandRepository"
        - name: "brandEntityMapper"
          value:
            sapientType: "MOCK"
            valueType: "com.emazon.stock.ports.persistence.mysql.mapper.IBrandEntityMapper"
            uuid: "brandEntityMapper"
      valueType: "com.emazon.stock.ports.persistence.mysql.adapter.BrandAdapter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "brandName1"
      valueType: "java.lang.String"
      uuid: "brandName"
    - sapientType: "MOCK"
      valueType: "com.emazon.stock.ports.persistence.mysql.repository.IBrandRepository"
      uuid: "brandRepository"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "NULL"
          valueType: "com.emazon.stock.ports.persistence.mysql.entity.BrandEntity"
          uuid: "uniqueUuid1"
      valueType: "java.util.Optional"
      genericValueType: "com.emazon.stock.ports.persistence.mysql.entity.BrandEntity"
      uuid: "optional"
    - sapientType: "BASIC"
      content: !<regular>
        value: "false"
      valueType: "boolean"
      uuid: "boolean1"
    branches:
    - lineNumber: 22
      expression: "brandRepository.findByBrandName(brandName).isPresent()"
      range: "(22,16)-(22,69)"
      evaluatedAs: false
